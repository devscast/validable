{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Validable","text":"<p>Validating text fields when using jetpack compose can sometimes be challenging and verbose.</p> <p>Validable is an extensible library that allows you to validate your text fields in a simpler way while having a reusable code.</p> <pre><code>@Composable  \nfun MyScreen() { \n\n     val emailField = remember { EmailValidable() }  \n\n    TextField(  \n        value = emailField.value,\n        onValueChange = { emailField.value = it }, // update the text  \n        isError = emailField.hasError(), // check if the field is not valid    \n    )  \n\n    AnimatedVisibility(visible = emailField.hasError()) {\n\n        Text(\n                text = emailField.errorMessage ?: \"\",\n                modifier = Modifier.fillMaxWidth(),\n                style = LocalTextStyle.current.copy(color = MaterialTheme.colors.error)\n        )\n\n    }  \n\n    Button(onClick = {  \n        // pass all fields to the withValidable method \n        withValidable(emailField) {  \n\n        // will be executed if all fields are valid         \n        Toast.makeText(context,\"All fields are valid\",Toast.LENGTH_SHORT).show() \n\n        } \n    }) { \n        Text(text = \"Submit\") \n    }  \n}  \n</code></pre>"},{"location":"#installation","title":"Installation","text":"<p>Step 1. Add the JitPack repository to your build file</p> <p>Add it in your root build.gradle at the end of repositories:</p> <pre><code>allprojects {\n    repositories {\n        ...\n        maven { url 'https://jitpack.io' }\n    }\n}\n</code></pre> <p>Step 2. Add the dependency</p> <pre><code>dependencies {\n    implementation 'com.github.devscast:validable:x.y.z'\n}\n</code></pre>"},{"location":"#license","title":"License","text":"<pre><code>Copyright 2024 Devscast Community.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"coc/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"coc/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"coc/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or   advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others\u2019 private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"coc/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"coc/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"coc/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at contact@devscast.tech. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project\u2019s leadership.</p>"},{"location":"coc/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p>"},{"location":"validables/cardscheme/","title":"CardSchemeValidable","text":"<p>Validates that a card number belongs to a specified scheme.</p> <pre><code>// Validate if a text is a MasterCard number\nval cardField = CardSchemeValidable(\n        CardScheme.MasterCard,\n        \"Only MasterCard is supported\"\n)\n\n// Supporting multiple cardScheme\nval multipleCardField = CardSchemeValidable(\n        CardScheme.MasterCard,CardScheme.Visa,\n        \"Only MasterCard and Visa are supported\"\n)\n\n// Merging multiple CardSchemes into one\nval mixedCardScheme = CardScheme.merge(CardScheme.MasterCard, CardScheme.Visa)\n\nval multipleCardField = CardSchemeValidable(\n    mixedCardScheme,\n    \"Only MasterCard and Visa are supported\"\n)\n</code></pre>"},{"location":"validables/email/","title":"Email","text":"<p>Validates that a value is a valid email address.</p> <pre><code>val emailField = EmailValidable(\"invalid email\")\n</code></pre>"},{"location":"validables/equal_to/","title":"Equal To","text":"<p>Validates that a value is equal to the specified value</p> <pre><code>val comparedValue = \"Hello World\"\n\nval textField = EqualToValidable(\n    comparedValue,\n    \"The value does not match $comparedValue\"\n)\n</code></pre>"},{"location":"validables/greater_than/","title":"Greater Than","text":"<p>Validates that a value is numerically greater than the specified value.</p> <pre><code>val comparedValue = 10\n\nval numberField = GreaterThanValidable(\n    comparedValue,\n    \"The value must be &gt; $comparedValue\"\n)\n</code></pre>"},{"location":"validables/greater_than_or_equal/","title":"Greater Than Or Equal","text":"<p>Validates that a value is numerically greater than or equal to the specified value.</p> <pre><code>val minAge = 18\n\nval ageTextField = GreaterThanOrEqualValidable(\n    minAge,\n    \"The minimum allowed age is $minAge\"\n)\n</code></pre>"},{"location":"validables/host_name/","title":"HostName","text":"<p>Validates that the given value is a valid host name</p> <pre><code>val domainNameField = HostnameValidable(\n    \"Invalid domain name\"\n)\n</code></pre> <p>According to RFC 2606, top-level domains (TLD) : <code>.example</code>, <code>.invalid</code>, <code>.localhost</code>, and <code>.test</code> are reserved and that\u2019s why hostnames containing them are not considered valid.</p>"},{"location":"validables/ip/","title":"IP Address","text":"<p>Validates that a value is a valid IP address</p> <pre><code>val ipTextField = IpValidable(\"Not a valid IP address\")\n</code></pre> <p>Note : Currently, IPv6 addresses are not supported.</p>"},{"location":"validables/less_than/","title":"Less than","text":"<p>Validates that a value is numerically less than the specified value.</p> <pre><code>val limit = 18\n\nval numberTextField = LessThanValidable(\n    limit,\n    \"The value must be &lt; $limit\"\n)\n</code></pre>"},{"location":"validables/less_than_or_equal/","title":"Less than or equal","text":"<p>Validates that a value is numerically less than or equal to the specified value.</p> <pre><code>val max = 9\n\nval numberTextField = LessThanOrEqualValidable(\n    max,\n    \"The value must be &lt;= $max\"\n)\n</code></pre>"},{"location":"validables/negative/","title":"Negative","text":"<p>Validates that a value is a negative number.</p> <pre><code>val numberField = NegativeValidable(\"The value must be &lt; 0\")\n</code></pre>"},{"location":"validables/negative_or_zero/","title":"Negative or zero","text":"<p>Validates that a value is a negative number or equal to zero.</p> <pre><code>val numberField = NegativeOrZeroValidable(\"The value must be &lt;= 0\")\n</code></pre>"},{"location":"validables/not_blank/","title":"Not blank","text":"<p>Validates that the value is not blank - neither empty string nor whitespace are valid</p> <pre><code>val textField = NotBlankValidable(\"This field cannot be blank\")\n</code></pre>"},{"location":"validables/not_empty/","title":"Not empty","text":"<p>Validates that a value is not empty and contains some characters or whitespace characters.</p> <pre><code>val textField = NotBlankValidable(\"This field cannot be blank\")\n</code></pre>"},{"location":"validables/not_equal/","title":"Not equal","text":"<p>Validates that a value is not equal to the specified value</p> <pre><code>val notAcceptedNumber = 7\n\nval numberTextField = NotEqualToValidable(\n    notAcceptedNumber,\n    \"The value must be different from $notAcceptedNumber\"\n)\n</code></pre>"},{"location":"validables/positive/","title":"Positive","text":"<p>Validates that a value is a positive number.</p> <pre><code>val numberField = PositiveValidable(\"The value must be &gt; 0\")\n</code></pre>"},{"location":"validables/positive_or_zero/","title":"Positive or zero","text":"<p>Validates that a value is a positive number or equal to zero.</p> <pre><code>val numberField = PositiveOrZeroValidable(\"The value must be &gt;= 0\")\n</code></pre>"},{"location":"validables/range/","title":"Range","text":"<p>Validates that a given number is between some minimum and maximum.</p> <pre><code>val valueTextFiel = RangeValidable(0,9,\"The value must be &gt;= 0 and &lt;= 9\")\n</code></pre> <p>Note : The range is inclusive</p>"},{"location":"validables/regex/","title":"Regex","text":"<p>Validates that a value matches a regular expression.</p> <pre><code>val pattern = \"^[0-9]+$\"\n\nval textField = RegexValidable(pattern,\"This value is not valid.\")\n</code></pre>"},{"location":"validables/url/","title":"Url","text":"<p>Validates that a value is a valid URL string.</p> <pre><code>val numberField = UrlValidable(\"This value is not a valid URL.\")\n</code></pre>"}]}